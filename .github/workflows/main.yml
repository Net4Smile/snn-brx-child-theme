name: Bump version and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Debug commit message
        run: |
          echo "HEAD commit message: ${{ github.event.head_commit.message }}"

      - name: Check if commit message contains alphatag
        id: checkmsg
        run: |
          msg="${{ github.event.head_commit.message }}"
          if echo "$msg" | grep -iq 'alphatag'; then
            echo "commit_message_contains_alphatag=true" >> $GITHUB_ENV
          else
            echo "commit_message_contains_alphatag=false" >> $GITHUB_ENV
          fi

      - name: Display current style.css before update
        run: cat style.css

      - name: Check last commit message
        id: check_last_commit
        run: |
          echo "last_commit_message=${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT

      - name: Get commit messages since last release
        id: get_commits
        run: |
          current_version=$(grep -oP 'Version:\s*\K[0-9.]+' style.css)
          last_tag="v${current_version}"
          echo "Last tag: $last_tag"
          if git rev-parse "$last_tag" >/dev/null 2>&1; then
            commits=$(git log "$last_tag"..HEAD --pretty=format:"- %s")
          else
            commits=$(git log --pretty=format:"- %s")
          fi
          if [ -z "$commits" ]; then
            commits="No changes."
          fi
          echo "commit_messages<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Handle PRERELEASE: does NOT bump version, just reuses current
      - name: Set current version for prerelease and unique prerelease tag
        if: env.commit_message_contains_alphatag == 'true'
        id: prerelease_tag
        run: |
          current_version=$(grep -oP 'Version:\s*\K[0-9.]+' style.css)
          base_tag="v${current_version}-pre"
          candidate_tag="$base_tag"
          i=0
          while git rev-parse "$candidate_tag" >/dev/null 2>&1; do
            i=$((i+1))
            candidate_tag="${base_tag}${i}"
          done
          echo "Using prerelease tag: $candidate_tag"
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "new_version=$current_version" >> $GITHUB_ENV
          echo "prerelease_tag=$candidate_tag" >> $GITHUB_ENV

      # Handle RELEASE: bump version, update style.css
      - name: Bump version in style.css
        if: contains(github.event.head_commit.message, 'release') && env.commit_message_contains_alphatag != 'true'
        id: bump_version
        run: |
          current_version=$(grep -oP 'Version:\s*\K[0-9.]+' style.css)
          echo "Current version: $current_version"
          IFS='.' read -r -a version_parts <<< "$current_version"
          MAJOR=${version_parts[0]}
          MINOR=${version_parts[1]}
          THRESHOLD=999
          if [ "$MINOR" -ge "$THRESHOLD" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
          else
            MINOR=$((MINOR + 1))
          fi
          new_version="${MAJOR}.${MINOR}"
          awk -v new_version="$new_version" '{if ($1 == "Version:") {$2 = new_version} print}' style.css > style.css.tmp && mv style.css.tmp style.css
          updated_version=$(grep -oP 'Version:\s*\K[0-9.]+' style.css)
          echo "Updated version: $updated_version"
          if [ "$updated_version" != "$new_version" ]; then
            echo "Version update failed"
            exit 1
          fi
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Display current style.css after update
        if: always()
        run: cat style.css

      - name: Commit changes
        if: contains(github.event.head_commit.message, 'release') && env.commit_message_contains_alphatag != 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add style.css
          git commit -m "Bump version to ${{ env.new_version }}"
          git push

      - name: Set Git user for tagging
        if: env.commit_message_contains_alphatag == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create new GitHub tag
        if: contains(github.event.head_commit.message, 'release') && env.commit_message_contains_alphatag != 'true'
        run: |
          git tag -a "v${{ env.new_version }}" -m "Version ${{ env.new_version }}"
          git push origin "v${{ env.new_version }}"

      - name: Create new GitHub prerelease tag
        if: env.commit_message_contains_alphatag == 'true'
        run: |
          git tag -a "${{ env.prerelease_tag }}" -m "Prerelease ${{ env.prerelease_tag }}"
          git push origin "${{ env.prerelease_tag }}"

      - name: Create zip file of the repository
        if: contains(github.event.head_commit.message, 'release') || env.commit_message_contains_alphatag == 'true'
        run: |
          shopt -s extglob
          mkdir snn-brx-child-theme
          mv !(.git|*.github*|snn-brx-child-theme) snn-brx-child-theme/
          zip -r snn-brx-child-theme.zip snn-brx-child-theme -x "*.git*" "*.github*"
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          new_version: ${{ env.new_version }}

      - name: Create GitHub release
        if: contains(github.event.head_commit.message, 'release') && env.commit_message_contains_alphatag != 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: snn-brx-child-theme.zip
          tag_name: "v${{ env.new_version }}"
          release_name: "Release v${{ env.new_version }}"
          body: |
            Version ${{ env.new_version }} release of the project.

            ## Changes
            ${{ env.commit_messages }}

      - name: Create GitHub prerelease
        if: env.commit_message_contains_alphatag == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: snn-brx-child-theme.zip
          tag_name: "${{ env.prerelease_tag }}"
          release_name: "Prerelease ${{ env.prerelease_tag }}"
          body: |
            Prerelease ${{ env.prerelease_tag }} of the project.

            ## Changes
            ${{ env.commit_messages }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
